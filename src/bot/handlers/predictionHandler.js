const logger = require('../../utils/logger');
const Experiment = require('../../database/models/Experiment');
const { makeModelPrediction } = require('../../ml/predictionService');
const { convertParametersToObject, validateParameters } = require('../../utils/parameterUtils');

// State storage for ongoing predictions
const predictionState = new Map();

/**
 * Start the prediction process
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 */
async function startPrediction(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  try {
    // Reset any existing prediction state for this user
    predictionState.delete(userId);
    
    // Send instructions message
    await bot.sendMessage(
      chatId,
      'üß™ *–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–Ω–æ—á–∞—Å—Ç–∏—Ü*\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:\n\n' +
      '1. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è Eu (–º–ú/–ª) [—á–∏—Å–ª–æ > 0]\n' +
      '2. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –§–µ–Ω–∞–Ω—Ç—Ä–æ–ª–∏–Ω–∞ (–º–ú/–ª) [—á–∏—Å–ª–æ >= 0]\n' +
      '3. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –õ–∏–≥–∞–Ω–¥–∞ (–º–ú/–ª) [—á–∏—Å–ª–æ >= 0]\n' +
      '4. –í–∏–¥ –ª–∏–≥–∞–Ω–¥–∞ [0-3]:\n' +
      '   ‚Ä¢ 0 - –Ω–µ—Ç\n' +
      '   ‚Ä¢ 1 - –∫–∏—Å–ª–æ—Ç–∞\n' +
      '   ‚Ä¢ 2 - —ç—Ñ–∏—Ä\n' +
      '   ‚Ä¢ 3 - –Ω–∞—Ñ—Ç–∏–ª\n' +
      '5. pH BSA [—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: 7-11]\n' +
      '6. –û–±—ä–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–ª) [—á–∏—Å–ª–æ > 0]\n' +
      '7. –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–∏–Ω) [—á–∏—Å–ª–æ > 0]\n' +
      '8. –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–ª/–º–∏–Ω) [—á–∏—Å–ª–æ > 0, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ]\n\n' +
      '–ü—Ä–∏–º–µ—Ä: `1 1 3 2 11 500 30`\n' +
      '–ü—Ä–∏–º–µ—Ä —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏: `2 2 6 1 9 340 34 10`\n\n' +
      '–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
      { parse_mode: 'Markdown' }
    );
    
    // Set prediction state for this user
    predictionState.set(userId, { state: 'awaiting_parameters' });
    
    logger.info(`Started prediction process for user ${userId}`);
  } catch (error) {
    logger.error(`Error starting prediction: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * Handle the response to a prediction request
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 */
async function handlePredictionResponse(bot, msg) {
  if (!msg.text) return;
  
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userState = predictionState.get(userId);
  
  // If the user is not in a prediction state, do nothing
  if (!userState || userState.state !== 'awaiting_parameters') return;
  
  try {
    // Check for cancel command
    if (msg.text.toLowerCase() === '/cancel') {
      predictionState.delete(userId);
      await bot.sendMessage(chatId, 'üõë –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      logger.info(`Prediction cancelled by user ${userId}`);
      return;
    }
    
    // Parse parameters
    const parameterInput = msg.text.trim();
    const paramArray = parameterInput.split(/\s+/).map(param => param.trim());
    
    // Validate parameters
    const validationResult = validateParameters(paramArray);
    if (!validationResult.valid) {
      await bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: ${validationResult.error}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
      );
      logger.warn(`Invalid parameters from user ${userId}: ${parameterInput}`);
      return;
    }
    
    // Convert parameters to an object
    const parameters = convertParametersToObject(paramArray);
    
    // Send "processing" message
    const processingMsg = await bot.sendMessage(
      chatId,
      '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ...'
    );
    
    // Make prediction
    const prediction = await makeModelPrediction(parameters);
    
    // Save experiment to database
    const experiment = await Experiment.create({
      parameters,
      predictedSize: prediction.size,
      predictedPdI: prediction.pdi,
      userId
    });
    
    // Format parameter display
    const parameterDisplay = formatParametersForDisplay(parameters);
    
    // Send prediction result
    await bot.editMessageText(
      `üî¨ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n` +
      `*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞:*\n${parameterDisplay}\n\n` +
      `*–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü:* ${prediction.size.toFixed(1)} –Ω–º\n` +
      `*–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π PdI:* ${prediction.pdi.toFixed(3)}\n` +
      `*–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (R¬≤):* ~${(prediction.sizeConfidence * 100).toFixed(0)}% / ${(prediction.pdiConfidence * 100).toFixed(0)}%\n\n` +
      `*–î–∞—Ç–∞/–≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞:* ${new Date().toLocaleString('ru-RU')}\n` +
      `*ID —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:* \`${experiment.experimentId}\`\n\n` +
      `–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∑–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n` +
      `/add_result ${experiment.experimentId}`,
      {
        chat_id: chatId,
        message_id: processingMsg.message_id,
        parse_mode: 'Markdown'
      }
    );
    
    // Clear prediction state
    predictionState.delete(userId);
    
    logger.info(`Prediction completed for user ${userId}, experiment ID: ${experiment.experimentId}`);
  } catch (error) {
    logger.error(`Error handling prediction response: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    );
    predictionState.delete(userId);
  }
}

/**
 * Format parameters for display in messages
 * @param {Object} parameters - Parameter object
 * @returns {string} - Formatted parameter string
 */
function formatParametersForDisplay(parameters) {
  const ligandTypeMap = {
    0: '–Ω–µ—Ç',
    1: '–∫–∏—Å–ª–æ—Ç–∞',
    2: '—ç—Ñ–∏—Ä',
    3: '–Ω–∞—Ñ—Ç–∏–ª'
  };
  
  return [
    `‚Ä¢ –ö–æ–Ω—Ü. Eu: ${parameters.euConcentration} –º–ú/–ª`,
    `‚Ä¢ –ö–æ–Ω—Ü. –§–µ–Ω–∞–Ω—Ç—Ä–æ–ª–∏–Ω–∞: ${parameters.phenanthrolineConcentration} –º–ú/–ª`,
    `‚Ä¢ –ö–æ–Ω—Ü. –õ–∏–≥–∞–Ω–¥–∞: ${parameters.ligandConcentration} –º–ú/–ª`,
    `‚Ä¢ –í–∏–¥ –ª–∏–≥–∞–Ω–¥–∞: ${ligandTypeMap[parameters.ligandType]} (${parameters.ligandType})`,
    `‚Ä¢ pH BSA: ${parameters.phBsa}`,
    `‚Ä¢ –û–±—ä–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${parameters.additionVolume} –º–ª`,
    `‚Ä¢ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${parameters.additionTime} –º–∏–Ω`,
    `‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${parameters.additionRate} –º–ª/–º–∏–Ω`
  ].join('\n');
}

module.exports = {
  startPrediction,
  handlePredictionResponse
};