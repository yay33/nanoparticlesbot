const User = require('../../database/models/User');
const Whitelist = require('../../database/models/Whitelist');
const logger = require('../../utils/logger');
const { isUserWhitelisted } = require('../middlewares/authMiddleware');

/**
 * Handle the /start command
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 */
async function handleStart(bot, msg) {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  
  try {
    // Check if user is whitelisted
    const isWhitelisted = await isUserWhitelisted(telegramId);
    
    if (isWhitelisted) {
      // Find or create user in the database
      const [user, created] = await User.findOrCreate({
        where: { telegramId },
        defaults: {
          name: msg.from.first_name || msg.from.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          isAdmin: false
        }
      });

      // Send welcome message
      await bot.sendMessage(
        chatId,
        `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NanoPredictBot - –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ñ–ª—É–æ—Ä–µ—Å—Ü–µ–Ω—Ç–Ω—ã—Ö –Ω–∞–Ω–æ—á–∞—Å—Ç–∏—Ü.\n\n` +
        `–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/predict - –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–Ω–æ—á–∞—Å—Ç–∏—Ü\n` +
        `/add_result - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞\n` +
        `/history - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤\n` +
        `/plot - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n` +
        `/export_csv - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV\n` +
        `/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n` +
        `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict`
      );
      
      logger.info(`User ${telegramId} (${user.name}) started the bot. Created: ${created}`);
    } else {
      // User is not whitelisted
      await bot.sendMessage(
        chatId,
        `‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.`
      );
      
      logger.warn(`Unauthorized access attempt from user ${telegramId}`);
    }
  } catch (error) {
    logger.error(`Error handling /start command: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
}

/**
 * Handle the /feedback command
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 * @param {string} feedbackText - Feedback text from the user
 */
async function handleFeedback(bot, msg, feedbackText) {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id.toString();
  
  try {
    // Log the feedback
    logger.info(`Feedback from user ${telegramId}: ${feedbackText}`);
    
    // Get admin IDs from environment variable
    const adminIds = (process.env.ADMIN_TELEGRAM_IDS || '').split(',').map(id => id.trim());
    
    // Forward feedback to all admins
    for (const adminId of adminIds) {
      if (adminId) {
        await bot.sendMessage(
          adminId,
          `üì¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}:\n\n${feedbackText}`
        );
      }
    }
    
    // Confirm to the user
    await bot.sendMessage(
      chatId,
      '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.'
    );
  } catch (error) {
    logger.error(`Error handling feedback: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

module.exports = {
  handleStart,
  handleFeedback
};