const logger = require('../../utils/logger');
const Experiment = require('../../database/models/Experiment');
const { formatExperimentForDisplay } = require('../../utils/displayUtils');

// State storage for ongoing add result operations
const addResultState = new Map();

/**
 * Start the process of adding actual results to an experiment
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 * @param {string} experimentId - ID of the experiment to add results to
 */
async function startAddResult(bot, msg, experimentId) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  try {
    // Find the experiment
    const experiment = await Experiment.findOne({
      where: {
        experimentId,
        userId
      }
    });
    
    if (!experiment) {
      await bot.sendMessage(
        chatId,
        '‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞.'
      );
      logger.warn(`User ${userId} attempted to add results to non-existent experiment ${experimentId}`);
      return;
    }
    
    // Check if results already exist
    if (experiment.actualSize !== null && experiment.actualPdI !== null) {
      await bot.sendMessage(
        chatId,
        '‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö?\n\n' +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–î–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
      );
      
      // Set state for confirmation
      addResultState.set(userId, {
        state: 'awaiting_overwrite_confirmation',
        experimentId
      });
      
      return;
    }
    
    // Display experiment details
    const experimentDisplay = formatExperimentForDisplay(experiment);
    
    await bot.sendMessage(
      chatId,
      `üìä *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n` +
      `*–î–µ—Ç–∞–ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:*\n${experimentDisplay}\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü (–Ω–º):\n` +
      `(—á–∏—Å–ª–æ > 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125.4)`,
      { parse_mode: 'Markdown' }
    );
    
    // Set state for size input
    addResultState.set(userId, {
      state: 'awaiting_actual_size',
      experimentId
    });
    
    logger.info(`Started add result process for user ${userId}, experiment ${experimentId}`);
  } catch (error) {
    logger.error(`Error starting add result: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * Handle response during the add result process
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 */
async function handleAddResultResponse(bot, msg) {
  if (!msg.text) return;
  
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userState = addResultState.get(userId);
  
  // If the user is not in an add result state, do nothing
  if (!userState) return;
  
  try {
    // Check for cancel command
    if (msg.text.toLowerCase() === '/cancel') {
      addResultState.delete(userId);
      await bot.sendMessage(chatId, 'üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
      logger.info(`Add result cancelled by user ${userId}`);
      return;
    }
    
    switch (userState.state) {
      case 'awaiting_overwrite_confirmation':
        if (msg.text.toLowerCase() === '–¥–∞') {
          // Continue with overwrite
          const experiment = await Experiment.findOne({
            where: {
              experimentId: userState.experimentId,
              userId
            }
          });
          
          const experimentDisplay = formatExperimentForDisplay(experiment);
          
          await bot.sendMessage(
            chatId,
            `üìä *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*\n\n` +
            `*–î–µ—Ç–∞–ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:*\n${experimentDisplay}\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü (–Ω–º):\n` +
            `(—á–∏—Å–ª–æ > 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125.4)`,
            { parse_mode: 'Markdown' }
          );
          
          // Update state
          userState.state = 'awaiting_actual_size';
          addResultState.set(userId, userState);
        } else {
          // Cancel overwrite
          addResultState.delete(userId);
          await bot.sendMessage(chatId, 'üõë –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
          logger.info(`Add result overwrite cancelled by user ${userId}`);
        }
        break;
        
      case 'awaiting_actual_size':
        const sizeInput = msg.text.trim();
        const size = parseFloat(sizeInput);
        
        if (isNaN(size) || size <= 0) {
          await bot.sendMessage(
            chatId,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —á–∞—Å—Ç–∏—Ü.'
          );
          return;
        }
        
        // Store size and ask for PdI
        userState.actualSize = size;
        userState.state = 'awaiting_actual_pdi';
        addResultState.set(userId, userState);
        
        await bot.sendMessage(
          chatId,
          `‚úÖ –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü: ${size} –Ω–º\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π PdI:\n` +
          `(—á–∏—Å–ª–æ >= 0, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.123)`
        );
        break;
        
      case 'awaiting_actual_pdi':
        const pdiInput = msg.text.trim();
        const pdi = parseFloat(pdiInput);
        
        if (isNaN(pdi) || pdi < 0) {
          await bot.sendMessage(
            chatId,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è PdI.'
          );
          return;
        }
        
        // Update experiment with actual results
        const experiment = await Experiment.findOne({
          where: {
            experimentId: userState.experimentId,
            userId
          }
        });
        
        // Calculate differences
        const sizeDiff = ((userState.actualSize - experiment.predictedSize) / experiment.predictedSize * 100).toFixed(1);
        const pdiDiff = ((pdi - experiment.predictedPdI) / experiment.predictedPdI * 100).toFixed(1);
        
        // Update experiment
        experiment.actualSize = userState.actualSize;
        experiment.actualPdI = pdi;
        await experiment.save();
        
        // Clear state
        addResultState.delete(userId);
        
        // Send confirmation
        await bot.sendMessage(
          chatId,
          `‚úÖ *–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n` +
          `*ID —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:* \`${experiment.experimentId}\`\n\n` +
          `*–ü—Ä–æ–≥–Ω–æ–∑:*\n` +
          `‚Ä¢ –†–∞–∑–º–µ—Ä: ${experiment.predictedSize.toFixed(1)} –Ω–º\n` +
          `‚Ä¢ PdI: ${experiment.predictedPdI.toFixed(3)}\n\n` +
          `*–§–∞–∫—Ç:*\n` +
          `‚Ä¢ –†–∞–∑–º–µ—Ä: ${userState.actualSize.toFixed(1)} –Ω–º (${sizeDiff}%)\n` +
          `‚Ä¢ PdI: ${pdi.toFixed(3)} (${pdiDiff}%)\n\n` +
          `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /history`,
          { parse_mode: 'Markdown' }
        );
        
        logger.info(`User ${userId} added results for experiment ${experiment.experimentId}`);
        break;
    }
  } catch (error) {
    logger.error(`Error handling add result response: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
    addResultState.delete(userId);
  }
}

/**
 * Show experiment history for a user
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 * @param {number|null} limit - Maximum number of experiments to show
 */
async function showHistory(bot, msg, limit) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  try {
    // Default limit to 10 if not specified
    const actualLimit = limit || 10;
    
    // Get experiments for the user
    const experiments = await Experiment.findAll({
      where: { userId },
      order: [['createdAt', 'DESC']],
      limit: actualLimit
    });
    
    if (experiments.length === 0) {
      await bot.sendMessage(
        chatId,
        'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.'
      );
      return;
    }
    
    // Format the history message
    let historyText = `üìö *–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤* (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${actualLimit})\n\n`;
    
    for (const exp of experiments) {
      const date = new Date(exp.createdAt).toLocaleDateString('ru-RU');
      const params = exp.parameters;
      
      historyText += `*ID:* \`${exp.experimentId}\`\n`;
      historyText += `*–î–∞—Ç–∞:* ${date}\n`;
      historyText += `*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:* Eu=${params.euConcentration}, –§–µ–Ω=${params.phenanthrolineConcentration}, `;
      historyText += `–õ–∏–≥=${params.ligandConcentration} —Ç–∏–ø ${params.ligandType}, pH=${params.phBsa}\n`;
      historyText += `*–ü—Ä–æ–≥–Ω–æ–∑:* –†–∞–∑–º–µ—Ä=${exp.predictedSize.toFixed(1)} –Ω–º, PdI=${exp.predictedPdI.toFixed(3)}\n`;
      
      if (exp.actualSize !== null && exp.actualPdI !== null) {
        const sizeDiff = ((exp.actualSize - exp.predictedSize) / exp.predictedSize * 100).toFixed(1);
        const pdiDiff = ((exp.actualPdI - exp.predictedPdI) / exp.predictedPdI * 100).toFixed(1);
        
        historyText += `*–§–∞–∫—Ç:* –†–∞–∑–º–µ—Ä=${exp.actualSize.toFixed(1)} –Ω–º (Œî=${sizeDiff}%), `;
        historyText += `PdI=${exp.actualPdI.toFixed(3)} (Œî=${pdiDiff}%)\n`;
      } else {
        historyText += `*–§–∞–∫—Ç:* –ù–µ —É–∫–∞–∑–∞–Ω\n`;
      }
      
      historyText += `\n`;
    }
    
    historyText += `–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`;
    historyText += `/add_result ID_—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞\n\n`;
    historyText += `–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`;
    historyText += `/plot –ø–∞—Ä–∞–º–µ—Ç—Ä [ID_—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞_–æ–ø–æ—Ä–Ω–æ–≥–æ]`;
    
    await bot.sendMessage(chatId, historyText, { parse_mode: 'Markdown' });
    logger.info(`Showed history for user ${userId}, ${experiments.length} experiments`);
  } catch (error) {
    logger.error(`Error showing history: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

module.exports = {
  startAddResult,
  handleAddResultResponse,
  showHistory
};