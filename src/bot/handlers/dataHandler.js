const logger = require('../../utils/logger');
const Experiment = require('../../database/models/Experiment');
const { generateChart } = require('../../utils/chartUtils');
const fs = require('fs');
const path = require('path');
const { createObjectCsvWriter } = require('csv-writer');
const { formatParametersForCsv } = require('../../utils/displayUtils');

/**
 * Generate a plot based on parameter
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 * @param {string} parameter - Parameter to plot
 * @param {string} referenceExperimentId - ID of reference experiment to highlight
 */
async function generatePlot(bot, msg, parameter, referenceExperimentId) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  try {
    // Check if a parameter was specified
    if (!parameter) {
      // Show list of available parameters
      await bot.sendMessage(
        chatId,
        'üìä *–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞*\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:\n\n' +
        '‚Ä¢ `/plot eu` - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è Eu\n' +
        '‚Ä¢ `/plot phen` - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –§–µ–Ω–∞–Ω—Ç—Ä–æ–ª–∏–Ω–∞\n' +
        '‚Ä¢ `/plot lig` - –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –õ–∏–≥–∞–Ω–¥–∞\n' +
        '‚Ä¢ `/plot ligtype` - –í–∏–¥ –ª–∏–≥–∞–Ω–¥–∞\n' +
        '‚Ä¢ `/plot ph` - pH BSA\n' +
        '‚Ä¢ `/plot vol` - –û–±—ä–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n' +
        '‚Ä¢ `/plot time` - –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n' +
        '‚Ä¢ `/plot rate` - –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n' +
        '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –æ–ø–æ—Ä–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:\n' +
        '`/plot –ø–∞—Ä–∞–º–µ—Ç—Ä ID_—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞`\n\n' +
        '–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
        '`/plot_correlation`',
        { parse_mode: 'Markdown' }
      );
      return;
    }
    
    // Get parameter field
    const parameterMap = {
      'eu': 'euConcentration',
      'phen': 'phenanthrolineConcentration',
      'lig': 'ligandConcentration',
      'ligtype': 'ligandType',
      'ph': 'phBsa',
      'vol': 'additionVolume',
      'time': 'additionTime',
      'rate': 'additionRate'
    };
    
    const parameterField = parameterMap[parameter.toLowerCase()];
    
    if (!parameterField) {
      await bot.sendMessage(
        chatId,
        '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: eu, phen, lig, ligtype, ph, vol, time, rate'
      );
      return;
    }
    
    // Get experiments for the user
    const experiments = await Experiment.findAll({
      where: { userId },
      order: [['createdAt', 'ASC']]
    });
    
    if (experiments.length === 0) {
      await bot.sendMessage(
        chatId,
        'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.'
      );
      return;
    }
    
    // Prepare data for plotting
    const plotData = {
      x: [],
      ySize: [],
      yPdi: [],
      referenceIndex: -1
    };
    
    experiments.forEach((exp, index) => {
      const value = exp.parameters[parameterField];
      if (value !== undefined) {
        plotData.x.push(value);
        plotData.ySize.push(exp.actualSize || exp.predictedSize);
        plotData.yPdi.push(exp.actualPdI || exp.predictedPdI);
        
        // Check if this is the reference experiment
        if (referenceExperimentId && exp.experimentId === referenceExperimentId) {
          plotData.referenceIndex = index;
        }
      }
    });
    
    // Create "temp" directory if it doesn't exist
    const tempDir = path.join(__dirname, '../../../temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // Generate chart
    const chartOptions = {
      title: `–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: ${getParameterDisplayName(parameter)}`,
      xAxisLabel: getParameterDisplayName(parameter),
      yAxisLabel: '–†–∞–∑–º–µ—Ä (–Ω–º) / PdI',
      legendLabels: ['–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü (–Ω–º)', 'PdI x 100'],
      referenceIndex: plotData.referenceIndex
    };
    
    // Scale PdI values for better visibility
    const scaledPdi = plotData.yPdi.map(val => val * 100);
    
    const chartPath = await generateChart(
      plotData.x,
      [plotData.ySize, scaledPdi],
      chartOptions,
      path.join(tempDir, `plot_${userId}_${Date.now()}.png`)
    );
    
    // Send the chart
    await bot.sendPhoto(
      chatId,
      fs.createReadStream(chartPath),
      {
        caption: `üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: ${getParameterDisplayName(parameter)}` +
                (referenceExperimentId ? `\n–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: ${referenceExperimentId}` : '') +
                '\n\n–ó–Ω–∞—á–µ–Ω–∏—è PdI —É–º–Ω–æ–∂–µ–Ω—ã –Ω–∞ 100 –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏'
      }
    );
    
    // Clean up the temporary file
    fs.unlinkSync(chartPath);
    
    logger.info(`Generated plot for user ${userId}, parameter ${parameter}`);
  } catch (error) {
    logger.error(`Error generating plot: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * Generate a correlation plot
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 */
async function generateCorrelationPlot(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  try {
    // Get experiments for the user
    const experiments = await Experiment.findAll({
      where: { userId }
    });
    
    if (experiments.length < 5) {
      await bot.sendMessage(
        chatId,
        '‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 5 —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –£ –≤–∞—Å: ' +
        experiments.length + '.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.'
      );
      return;
    }
    
    // Prepare data for correlation plot
    const data = {
      euConcentration: [],
      phenanthrolineConcentration: [],
      ligandConcentration: [],
      ligandType: [],
      phBsa: [],
      additionVolume: [],
      additionTime: [],
      additionRate: [],
      size: [],
      pdi: []
    };
    
    experiments.forEach(exp => {
      data.euConcentration.push(exp.parameters.euConcentration);
      data.phenanthrolineConcentration.push(exp.parameters.phenanthrolineConcentration);
      data.ligandConcentration.push(exp.parameters.ligandConcentration);
      data.ligandType.push(exp.parameters.ligandType);
      data.phBsa.push(exp.parameters.phBsa);
      data.additionVolume.push(exp.parameters.additionVolume);
      data.additionTime.push(exp.parameters.additionTime);
      data.additionRate.push(exp.parameters.additionRate);
      data.size.push(exp.actualSize || exp.predictedSize);
      data.pdi.push(exp.actualPdI || exp.predictedPdI);
    });
    
    // Create "temp" directory if it doesn't exist
    const tempDir = path.join(__dirname, '../../../temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // Generate correlation heatmap
    const labels = [
      '–ö–æ–Ω—Ü. Eu', '–ö–æ–Ω—Ü. –§–µ–Ω', '–ö–æ–Ω—Ü. –õ–∏–≥', '–í–∏–¥ –ª–∏–≥–∞–Ω–¥–∞', 'pH BSA',
      '–û–±—ä–µ–º –¥–æ–±.', '–í—Ä–µ–º—è –¥–æ–±.', '–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±.', '–†–∞–∑–º–µ—Ä', 'PdI'
    ];
    
    const chartOptions = {
      title: '–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
      isCorrelation: true,
      labels
    };
    
    const chartPath = await generateChart(
      data,
      null,
      chartOptions,
      path.join(tempDir, `correlation_${userId}_${Date.now()}.png`)
    );
    
    // Send the chart
    await bot.sendPhoto(
      chatId,
      fs.createReadStream(chartPath),
      {
        caption: 'üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n' +
                '–¶–≤–µ—Ç —è—á–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n' +
                '- –¢—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π: —Å–∏–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (+1)\n' +
                '- –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π: —Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (-1)\n' +
                '- –ë–µ–ª—ã–π: –Ω–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (0)'
      }
    );
    
    // Clean up the temporary file
    fs.unlinkSync(chartPath);
    
    logger.info(`Generated correlation plot for user ${userId}`);
  } catch (error) {
    logger.error(`Error generating correlation plot: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * Export user experiments to CSV
 * @param {TelegramBot} bot - Telegram bot instance
 * @param {Object} msg - Message object from Telegram
 */
async function exportToCsv(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  try {
    // Get experiments for the user
    const experiments = await Experiment.findAll({
      where: { userId },
      order: [['createdAt', 'ASC']]
    });
    
    if (experiments.length === 0) {
      await bot.sendMessage(
        chatId,
        'üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.'
      );
      return;
    }
    
    // Create "temp" directory if it doesn't exist
    const tempDir = path.join(__dirname, '../../../temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // Create CSV file
    const csvFilePath = path.join(tempDir, `experiments_${userId}_${Date.now()}.csv`);
    
    // Define CSV header
    const csvWriter = createObjectCsvWriter({
      path: csvFilePath,
      header: [
        { id: 'id', title: 'ID —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞' },
        { id: 'date', title: '–î–∞—Ç–∞' },
        { id: 'euConcentration', title: '–ö–æ–Ω—Ü. Eu (–º–ú/–ª)' },
        { id: 'phenanthrolineConcentration', title: '–ö–æ–Ω—Ü. –§–µ–Ω–∞–Ω—Ç—Ä–æ–ª–∏–Ω–∞ (–º–ú/–ª)' },
        { id: 'ligandConcentration', title: '–ö–æ–Ω—Ü. –õ–∏–≥–∞–Ω–¥–∞ (–º–ú/–ª)' },
        { id: 'ligandType', title: '–í–∏–¥ –ª–∏–≥–∞–Ω–¥–∞' },
        { id: 'phBsa', title: 'pH BSA' },
        { id: 'additionVolume', title: '–û–±—ä–µ–º –¥–æ–±. (–º–ª)' },
        { id: 'additionTime', title: '–í—Ä–µ–º—è –¥–æ–±. (–º–∏–Ω)' },
        { id: 'additionRate', title: '–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±. (–º–ª/–º–∏–Ω)' },
        { id: 'predictedSize', title: '–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–º)' },
        { id: 'predictedPdI', title: '–ü—Ä–æ–≥–Ω–æ–∑ PdI' },
        { id: 'actualSize', title: '–§–∞–∫—Ç. —Ä–∞–∑–º–µ—Ä (–Ω–º)' },
        { id: 'actualPdI', title: '–§–∞–∫—Ç. PdI' },
        { id: 'sizeDiff', title: '–†–∞–∑–Ω–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ (%)' },
        { id: 'pdiDiff', title: '–†–∞–∑–Ω–∏—Ü–∞ PdI (%)' }
      ]
    });
    
    // Prepare data for CSV
    const records = experiments.map(exp => {
      const sizeDiff = exp.actualSize ? ((exp.actualSize - exp.predictedSize) / exp.predictedSize * 100).toFixed(1) : '';
      const pdiDiff = exp.actualPdI ? ((exp.actualPdI - exp.predictedPdI) / exp.predictedPdI * 100).toFixed(1) : '';
      
      return {
        id: exp.experimentId,
        date: new Date(exp.createdAt).toLocaleDateString('ru-RU'),
        ...formatParametersForCsv(exp.parameters),
        predictedSize: exp.predictedSize.toFixed(1),
        predictedPdI: exp.predictedPdI.toFixed(3),
        actualSize: exp.actualSize ? exp.actualSize.toFixed(1) : '',
        actualPdI: exp.actualPdI ? exp.actualPdI.toFixed(3) : '',
        sizeDiff,
        pdiDiff
      };
    });
    
    // Write to CSV
    await csvWriter.writeRecords(records);
    
    // Send the file
    await bot.sendDocument(
      chatId,
      fs.createReadStream(csvFilePath),
      {
        caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (${experiments.length} —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤)`,
        filename: `nanoparticle_experiments_${new Date().toISOString().slice(0, 10)}.csv`
      }
    );
    
    // Clean up the temporary file
    fs.unlinkSync(csvFilePath);
    
    logger.info(`Exported CSV for user ${userId}, ${experiments.length} experiments`);
  } catch (error) {
    logger.error(`Error exporting to CSV: ${error.message}`);
    await bot.sendMessage(
      chatId,
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

/**
 * Get a human-readable display name for a parameter
 * @param {string} parameter - Parameter code
 * @returns {string} - Display name
 */
function getParameterDisplayName(parameter) {
  const displayNames = {
    'eu': '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è Eu (–º–ú/–ª)',
    'phen': '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –§–µ–Ω–∞–Ω—Ç—Ä–æ–ª–∏–Ω–∞ (–º–ú/–ª)',
    'lig': '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –õ–∏–≥–∞–Ω–¥–∞ (–º–ú/–ª)',
    'ligtype': '–í–∏–¥ –ª–∏–≥–∞–Ω–¥–∞',
    'ph': 'pH BSA',
    'vol': '–û–±—ä–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–ª)',
    'time': '–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–∏–Ω)',
    'rate': '–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–ª/–º–∏–Ω)'
  };
  
  return displayNames[parameter.toLowerCase()] || parameter;
}

module.exports = {
  generatePlot,
  generateCorrelationPlot,
  exportToCsv
};